name: Prepare Release

on:
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  create-tag:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get PR labels
        id: labels
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.pull_request.labels.map(label => label.name);
            console.log('PR labels:', labels);
            
            const releaseLabel = labels.find(label => label.startsWith('release:'));
            if (!releaseLabel) {
              console.log('No release label found, skipping release');
              return 'skip';
            }
            
            const releaseType = releaseLabel.split(':')[1];
            if (!['major', 'minor', 'patch'].includes(releaseType)) {
              console.log(`Invalid release type: ${releaseType}`);
              return 'skip';
            }
            
            return releaseType;
          result-encoding: string

      - name: Get latest tag
        if: steps.labels.outputs.result != 'skip'
        id: latest-tag
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Calculate new version
        if: steps.labels.outputs.result != 'skip'
        id: new-version
        run: |
          RELEASE_TYPE="${{ steps.labels.outputs.result }}"
          LATEST_TAG="${{ steps.latest-tag.outputs.tag }}"
          
          # Remove 'v' prefix if present
          VERSION=${LATEST_TAG#v}
          
          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Calculate new version based on release type
          case $RELEASE_TYPE in
            major)
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
              ;;
            minor)
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
              ;;
            patch)
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag
        if: steps.labels.outputs.result != 'skip'
        env:
          NEW_VERSION: ${{ steps.new-version.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create tag with PR information
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          TAG_MESSAGE="Release $NEW_VERSION

          Auto-generated from PR #$PR_NUMBER: $PR_TITLE"
          
          # Create annotated tag
          git tag -a "$NEW_VERSION" -m "$TAG_MESSAGE"
          
          # Push tag
          git push origin "$NEW_VERSION"

      - name: Comment on PR
        if: steps.labels.outputs.result != 'skip'
        uses: actions/github-script@v7
        with:
          script: |
            const newVersion = '${{ steps.new-version.outputs.version }}';
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸŽ‰ This PR has been merged and tagged as release \`${newVersion}\`!\n\nThe release workflow will automatically create a GitHub Release with the built artifacts.`
            });