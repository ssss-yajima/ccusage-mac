name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: "5.9"
        
    - name: Build app
      run: |
        cd CCUsageMac
        swift build -c release
        
    - name: Create app bundle
      run: |
        mkdir -p CCUsageMac.app/Contents/MacOS
        mkdir -p CCUsageMac.app/Contents/Resources
        
        # Copy binary
        cp CCUsageMac/.build/release/CCUsageMac CCUsageMac.app/Contents/MacOS/
        
        # Copy icon if exists
        if [ -f CCUsageMac/Resources/AppIcon.icns ]; then
            cp CCUsageMac/Resources/AppIcon.icns CCUsageMac.app/Contents/Resources/
        fi
        
        # Create Info.plist
        cat > CCUsageMac.app/Contents/Info.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>CCUsageMac</string>
            <key>CFBundleIdentifier</key>
            <string>com.yajima.ccusage-mac</string>
            <key>CFBundleName</key>
            <string>CCUsageMac</string>
            <key>CFBundleIconFile</key>
            <string>AppIcon</string>
            <key>CFBundleShortVersionString</key>
            <string>${GITHUB_REF_NAME#v}</string>
            <key>CFBundleVersion</key>
            <string>${GITHUB_REF_NAME#v}</string>
            <key>LSMinimumSystemVersion</key>
            <string>13.0</string>
            <key>LSUIElement</key>
            <true/>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOF
        
        # Ad-hoc sign the app to prevent "damaged" error
        codesign --force --deep --sign - CCUsageMac.app
        
    - name: Create DMG
      run: |
        mkdir dmg-temp
        cp -R CCUsageMac.app dmg-temp/
        hdiutil create -volname "CCUsageMac" -srcfolder dmg-temp -ov -format UDZO CCUsageMac-${GITHUB_REF_NAME}.dmg
        rm -rf dmg-temp
        
    - name: Generate Release Notes
      id: release-notes
      uses: actions/github-script@v7
      with:
        script: |
          const tag = context.ref.replace('refs/tags/', '');
          const { data: previousTags } = await github.rest.repos.listTags({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 2
          });
          
          let previousTag = null;
          if (previousTags.length > 1) {
            // Current tag is at index 0, previous is at index 1
            previousTag = previousTags[1].name;
          }
          
          // Get commits between tags
          const commits = previousTag ? await github.rest.repos.compareCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            base: previousTag,
            head: tag
          }) : null;
          
          // Get PRs merged since last release
          const prs = [];
          if (commits) {
            for (const commit of commits.data.commits) {
              const prsForCommit = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: commit.sha
              });
              prs.push(...prsForCommit.data);
            }
          }
          
          // Remove duplicates
          const uniquePrs = Array.from(new Map(prs.map(pr => [pr.number, pr])).values());
          
          // Categorize PRs by labels
          const features = [];
          const bugfixes = [];
          const others = [];
          const breaking = [];
          
          for (const pr of uniquePrs) {
            const labels = pr.labels.map(l => l.name);
            if (labels.includes('breaking-change')) {
              breaking.push(pr);
            } else if (labels.includes('feature') || labels.includes('enhancement')) {
              features.push(pr);
            } else if (labels.includes('bug') || labels.includes('fix')) {
              bugfixes.push(pr);
            } else {
              others.push(pr);
            }
          }
          
          // Build release notes
          let notes = `## What's Changed in ${tag}\n\n`;
          
          if (breaking.length > 0) {
            notes += `### ⚠️ Breaking Changes\n`;
            breaking.forEach(pr => {
              notes += `- ${pr.title} by @${pr.user.login} in #${pr.number}\n`;
            });
            notes += '\n';
          }
          
          if (features.length > 0) {
            notes += `### ✨ New Features\n`;
            features.forEach(pr => {
              notes += `- ${pr.title} by @${pr.user.login} in #${pr.number}\n`;
            });
            notes += '\n';
          }
          
          if (bugfixes.length > 0) {
            notes += `### 🐛 Bug Fixes\n`;
            bugfixes.forEach(pr => {
              notes += `- ${pr.title} by @${pr.user.login} in #${pr.number}\n`;
            });
            notes += '\n';
          }
          
          if (others.length > 0) {
            notes += `### 📚 Other Changes\n`;
            others.forEach(pr => {
              notes += `- ${pr.title} by @${pr.user.login} in #${pr.number}\n`;
            });
            notes += '\n';
          }
          
          notes += `\n**Full Changelog**: https://github.com/${context.repo.owner}/${context.repo.repo}/compare/${previousTag || ''}...${tag}`;
          
          return notes;
        result-encoding: string
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: CCUsageMac-${{ github.ref_name }}.dmg
        draft: false
        prerelease: false
        body: ${{ steps.release-notes.outputs.result }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}